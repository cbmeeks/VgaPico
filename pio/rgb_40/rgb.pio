///////////////////////////////////////////////////////////////////////////////
//  rgb.pio
//
//  This PIO config is for a horizontal resolution of 40 pixels with 6 bit color
//  Each pixel (6 bits, ignoring top 2 MSB) is sent through 6 GPIO to generate
//  up to 63 colors plus black.
//  Before you ask why in the world would anyone want only 40 horizontal pixels...
//  Well, it reminds me of the GR mode in Apple II.  :-)
///////////////////////////////////////////////////////////////////////////////

.program rgb

pull block 					; Pull from FIFO to OSR (only once)
mov y, osr 					; Copy value from OSR to y scratch register

.wrap_target
    set pins, 0 			; Zero RGB pins in blanking
    mov x, y 				; Initialize counter variable

    wait 1 irq 1 [3]		; Wait for vsync active mode (starts 5 cycles after execution)

// The timing for this needs to work out to 3200 cycles per scanline.
// Normally, the RGB PIO runs full speed (125MHz).  But because we're using such a small resolution (40 pixels),
// we can reduce the PIO speed by a factor of 5.  This causes the PIO to run at the VGA frequency of 25MHz*.
// But we still need 3200 clock cycles to make sure the image is centered.

// We know we have 40 pixels and 3200 clock cycles.  And, we're running at 25MHz.
// (125 / 25) = 5
// 3200 clocks / 40 pixels = 80 clocks per pixel at 125MHz.
// At 25MHz, 80 clocks / 5 = 16 clocks of delay.
// So each "colorout" block needs to be 16 clocks.
// * (VGA is actually 25.175MHz but we're rounding down to make the math easy.  Most VGA monitors seem to be OK with this).

colorout:
	pull block				; Pull color value                          1 cycle
	out pins, 6	[13] 		; Push out to pins (pixel)                  14 cycles
	jmp x-- colorout		; Stay here thru horizontal active mode     1 cycle
.wrap


% c-sdk {
static inline void rgb_program_init(PIO pio, uint sm, uint offset, uint pin) {

    // creates state machine configuration object c, sets
    // to default configurations.
    pio_sm_config c = rgb_program_get_default_config(offset);

    // Set clock division.  Pico runs at 125MHz.  Diving by 5 runs this PIO at 25MHz.
    // Note, we don't normally run the RGB PIO this slow.
    sm_config_set_clkdiv(&c, 5) ;


    // Map the state machine's SET and OUT pin group to six pins, the `pin`
    // parameter to this function is the lowest one. These groups overlap.
    sm_config_set_set_pins(&c, pin, 6);
    sm_config_set_out_pins(&c, pin, 6);


    // Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, pin + 0);
    pio_gpio_init(pio, pin + 1);
    pio_gpio_init(pio, pin + 2);
    pio_gpio_init(pio, pin + 3);
    pio_gpio_init(pio, pin + 4);
    pio_gpio_init(pio, pin + 5);

    // Set the pin direction to output at the PIO (6 pins)
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 6, true);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
}
%}